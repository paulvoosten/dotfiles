#!/bin/bash
# coloring variables
reset='\[\e[0m\]'
# black & gray
color0='\[\e[0;30m\]'
color8='\[\e[1;30m\]'

# red
color1='\[\e[0;31m\]'
color9='\[\e[1;31m\]'

# green
color2='\[\e[0;32m\]'
color10='\[\e[1;32m\]'

# yellow
color3='\[\e[0;33m\]'
color11='\[\e[1;33m\]'

# blue
color4='\[\e[0;34m\]'
color12='\[\e[1;34m\]'

# purple
color5='\[\e[0;35m\]'
color13='\[\e[1;35m\]'

# teal
color6='\[\e[0;36m\]'
color14='\[\e[1;36m\]'

# silver & white
color7='\[\e[0;37m\]'
color15='\[\e[1;37m\]'

git_prompt() {
    local prompt=''
    local branch=''

    # check if current directory is a git repo
    if [ $(git rev-parse --is-inside-work-tree &> /dev/null; echo "${?}") == '0' ]; then
        # check if current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
            git update-index --realy-refresh -q &> /dev/null

            # check for uncommited files
            ! $(git diff --quiet --ignore-submodules --cached) && prompt+='+'

            # check for unstaged files
            ! $(git diff-files --quiet --ignore-submodules --) && prompt+='!'

            # check for untracked files
            [ -n "$(git ls-files --others --exclude-standard)" ] && prompt+='?'


            #check for stashed files
            $(git rev-parse --verify refs/stash &> /dev/null) && prompt+='$'

            # check if pulling is needed
            #if  then
            #    prompt+=''
            #fi

            # check if pushing is needed
            #if then
            #    prompt+=''
            #fi
        fi

        branch+="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')"
        [ -n "${prompt}" ] && prompt="[${prompt}]"

        echo -e "${1}${branch} ${2}${prompt}"
    else
        return
    fi
}

bash_prompt() {
    # change color of username when root
    if [[ "${USER}" == "root" ]]; then
        user_color="${color9}"
    else
        user_color="${color15}"
    fi;

    # change color if connected with SSH
    if [[ "${SSH_TTY}" ]]; then
        host_color="${color9}"
    else
        host_color="${color15}"
    fi

    # todo fix status color so it changes based on last executed command (red == failed)
    if [[ $? -eq 0 ]]; then
        status_color="${color10}"
    else
        status_color="${color9}"
    fi

    PS1="${user_color}\u"
    PS1+="${color10}@"
    PS1+="${host_color}\h:"
    PS1+="${color10} \w"
    PS1+="\$(git_prompt \"${color15}  ${color11}\" \"${color12}\")\n"
    PS1+="${status_color}$ ${reset}"

    PS2="${status_color} ${reset}"
}

PROMPT_COMMAND=bash_prompt
